## 项目描述

应用名称：Easy DataSet

这是一个专门用于从指定领域的文件创建用于微调大模型数据集的项目，用户可以上传自己的文件，如 MarkDown，系统可以实现文件智能分割，以及每个片段提取出的问题列表，最后再调用模型，把每个问题生成对应数据集的答案，中间用户可以对数据集、生成的问题、数据集结果进行随意更改。

 来用于微调大模型的数据集。


## 功能设计

### 项目列表

- 每个项目其实就对应一个创建微调数据集的一个独立任务，里面有自己的配置，和微调的相关数据
- 在这个功能里，用户可以创建、查看、和删除项目
- 创建项目时，需要填写项目的名称和描述
- 进入项目详情后，顶部导航栏中间位置可以看到以下几个模块
    - 文本分割
    - 问题列表
    - 数据集
    - 项目设置

### 文本分割

当用户没有上传文件时，展示一个上传文件的组件，当前限制只能上传 MarkDown 文件
当用户上传文件后，调用后端的文本分割服务，生成分割后的文本片段+提取的目录结构，展示效果
- 最上面展示提取出的目录结构 + 根据目录结构生成的领域树
- 每个文本片段都有一个唯一名称，可以看到文本片段的字数，预览文本的前半部分，是否已经生成问题，分页展示
    - 点击片段详情，可以看到文本片段的全部内容 + 已经生成的问题
- 每个文本片段都有一个操作栏，可以进行编辑、删除、生成摘要、生成问题

整个模块也有一个操作按钮：批量生成问题，点击后，会调用后端服务，把当前每个代码片段提取出问题


### 问题列表
可以展示根据上述文本片段已经生成的所有问题，使用标签树展示，格式为：一级标签、二级标签、问题
- 用户可以对标签树进行随意的展开，删除具体问题、展开查看具体问题等操作

整个模块也有一个操作按钮：批量生成答案，点击后，会调用后端服务，把当前每个问题根据文本片段生成答案

### 数据集
- 可以查看已经生成好的所有的数据集列表、，列表只展示问题
- 查看详情可以看到数据集具体的内容包括数据集的问题和答案以及思维链（不一定有）、可以对每个数据集进行随意更改和达标
- 提供导出数据集的操作，支持选择不同的数据集格式

### 项目设置
- 基础配置：可以修改当前项目的名称和描述，展示项目 ID（创建项目时生成，不可更改）
- 模型配置：可以配置项目使用到的LLM模型提供商
    - Ollama：支持配置 API 地址(http://localhost:11434/v1/)、模型列表（从本地已下载的模型自动拉取）
    - OpenAI：支持配置 API 地址(https://api.openai.com)、API 密钥、模型名称（如 gpt-3.5-turbo）
    - 硅基流动：支持配置 API 地址(https://api.siliconflow.cn)、API 密钥、模型名称（如 gpt-3.5-turbo）
    - 深度求索：支持配置 API 地址（https://api.deepseek.com）、API 密钥、模型名称（如 DeepSeek-R1）
    - 智谱AI：支持配置 API 地址（https://open.bigmodel.cn/api/paas/v4/）、API 密钥、模型名称（如 GLM-4-Flash）
- 任务配置
    - 文本分段设置：将文本分割的最小字数（默认1500）和最大字数（默认2000）
    - 问题生成设置：多少字符数生成一个问题（默认 240）
    - HuggingFace Token：这里仅做展示，暂不实现功能 

## 前端模块设计

### 顶部导航

- 最左侧：展示应用名称(Easy DataSet)+Logo，然后展示当前项目名（下拉框，可以切换其他项目）
- 进入项目详情后，顶部导航栏中间位置可以看到以下几个模块
    - 文本分割
    - 问题列表
    - 数据集
    - 项目设置
- 最右侧：当前选择使用的模型，根据前面已经配置过的模型可以支持切换，例如 Ollama：DeepSeek-R1、OpenAI：gpt-3.5-turbo、硅基流动：gpt-3.5-turbo、智谱AI：GLM-4-Flash

## 服务端模块设计

### 数据库
用 fs 模拟文件数据库，每个项目有一个独立的目录，目录名用项目 ID 命名，项目目录下包含以下内容：
- 项目配置文件（当前项目的各种配置：JSON）
- 文件目录（存储分割前用户上传的原始文件）
- 分割后的文本目录（每个片段都有一个独立的文本文件）
- 问题列表 JSON（格式待定）
- 标签树 JSON（格式待定）
- 数据集结果 JSON（格式待定）

### 大模型
封装各个通用的，根据项目配置里的各个模型提供商的配置的大模型的调用能力

### 文本分割
这个先空着，我已经封装好了，后续导入进去


## 技术栈

- **编程语言**: JavaScript（不要用 TS）
- **框架**: Next.js (App Router)
- **UI**: Material-UI (MUI)
- **数据库**: 使用 fs 模拟文件数据库


## UI 规范
- 现代化、简洁、美观的界面风格
- 丰富的色彩运用，但是保持整体和谐
- 流畅的交互动画，提升用户体验
- 在按钮和需要的地方添加图标
- 参考灵感：结合苹果官方的设计美学